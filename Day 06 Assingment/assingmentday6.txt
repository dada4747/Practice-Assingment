For Loop 
Q1. Write a program that takes a command line argument n and prints a table of the power of 2 that are less than or equal to 2^n
----code----
#! /bin/bash -x

read -p "Enter the number :" n
for((i=1;i<=$n;i++))
do
        echo "2 * $i =$((2*$i)) "
done



----output----
$ bash sixOne.sh
Enter the number :5
2 * 1 =2
2 * 2 =4
2 * 3 =6
2 * 4 =8
2 * 5 =10

___________________________________________________________________________
Q2.Write a program that takes a command line argument n and prints the nth harmonic number 

#! /bin/bash -x
count=0
read -p "enter the number :" n
for((i=1;i<=n;i++))
do

        count=$(( $count + $(( 1 / $i )) ))
#       count = $(($count + 1 / $i ))

done
echo "$count"

--------

___________________________________________________________________________
Q3. write a program that takes a input and determines if the number is a prime 
----code----
#! /bin/bash -x
read -p "enter number to check prime or not " n
for((i=2;i<=$n/2;i++))
do
        ans=$(( n%i ))
        if [ $ans -eq 0 ]
        then
                echo "$n is not a prime number."
                exit 0
        fi
done
echo "$n is prime number."

---output----
$ bash -x sixThree.sh
+ read -p 'enter number to check prime or not ' n
enter number to check prime or not 7
+ (( i=2 ))
+ (( i<=7/2 ))
+ ans=1
+ '[' 1 -eq 0 ']'
+ (( i++ ))
+ (( i<=7/2 ))
+ ans=1
+ '[' 1 -eq 0 ']'
+ (( i++ ))
+ (( i<=7/2 ))
+ echo '7 is prime number.'
7 is prime number.


___________________________________________________________________________
Q4. extend the program to take a range of number as input and output prime numbers in that range.
----code----
#! /bin/bash -x
read -p "check prime in range of input " n
for((i=1;i<=$n;i++))
do
        ans=$(( i%2 ))
        if [ $ans -ne 0 ]
        then
                echo "prime number :$i"
        fi
done

----output----

$ bash sixFour.sh
check prime in range of input 20
prime number :1
prime number :3
prime number :5
prime number :7
prime number :9
prime number :11
prime number :13
prime number :15
prime number :17
prime number :19


___________________________________________________________________________
Q5 write a program that computers a factorial of a number taken as input.
----code----

#! /bin/bash -x
read -p "Enter the number for factorial" n
fact=1
for((i=1;1<=$n;i++))
do
        fact=$((fact*n))
        n=$((n-1))
done
echo "$fact"

----output----
$ bash -x sixfive.sh
+ read -p 'Enter the number for factorial' n
Enter the number for factorial5
+ fact=1
+ (( i=1 ))
+ (( 1<=5 ))
+ fact=5
+ n=4
+ (( i++ ))
+ (( 1<=4 ))
+ fact=20
+ n=3
+ (( i++ ))
+ (( 1<=3 ))
+ fact=60
+ n=2
+ (( i++ ))
+ (( 1<=2 ))
+ fact=120
+ n=1
+ (( i++ ))
+ (( 1<=1 ))
+ fact=120
+ n=0
+ (( i++ ))
+ (( 1<=0 ))
+ echo 120
120

___________________________________________________________________________
While Loop 
Write a program that takes a command line argument n and print a table of power of 2 that are less than or equal ro 2^n till 256 is reach

#! /bin/bash -x
i=1
read -p "Enter the number :" n
while [ $i -lt $n ]
do
        echo "2* $i =$((2*$i))"
        ((i++))
done
----output----
$ bash sixSecOne.sh
Enter the number :5
2* 1 =2
2* 2 =4
2* 3 =6
2* 4 =8

____________________________________________________________________________
Find the magic number 
Aks the user to think of a number n between 1-100
Then check with the user if the number is less then n/2 or greater 
Repeat till the magic number is reached.

#! /bin/bash -x
read -p "how much time you flip coin:" n

heads=0
tails=0

while [ $n -lt 10 ]
do
        coin=$((RANDOM % 2))


        if [ $coin == 1 ]
        then
                echo "heads"
                heads=$((heads + 1))
                n=$((n + 1))
        else
                echo "Tails"
                tails=$((tails + 1))
                n=$((n + 1))

        fi
done
echo "you got $heads head and $tails tail "

-------------$ bash -x sixSecThree.sh
+ read -p 'how much time you flip coin:' n
how much time you flip coin:5
+ heads=0
+ tails=0
+ '[' 5 -lt 10 ']'
+ coin=0
+ '[' 0 == 1 ']'
+ echo Tails
Tails
+ tails=1
+ n=6
+ '[' 6 -lt 10 ']'
+ coin=1
+ '[' 1 == 1 ']'
+ echo heads
heads
+ heads=1
+ n=7
+ '[' 7 -lt 10 ']'
+ coin=0
+ '[' 0 == 1 ']'
+ echo Tails
Tails
+ tails=2
+ n=8
+ '[' 8 -lt 10 ']'
+ coin=0
+ '[' 0 == 1 ']'
+ echo Tails
Tails
+ tails=3
+ n=9
+ '[' 9 -lt 10 ']'
+ coin=0
+ '[' 0 == 1 ']'
+ echo Tails
Tails
+ tails=4
+ n=10
+ '[' 10 -lt 10 ']'
+ echo 'you got 1 head and 4 tail '
you got 1 head and 4 tail
____________________________________________________________________________

4.
========================================================================
Function practice problems

Help user find degF or degC based on their conversion selection use case statement and ensure taht the input are within the freezing point () c/32F) and the boiling point of water ( 100 c/ 212 F)
degF=(degC * 9/5) + 32
degC=(degF - 32) * 5/9
#! /bin/bash -x
echo "select option for conversion "
echo "1. degF"
echo "2. degC"
##read -p "select your choice :" choice


function fucTF(){
        local tc=$1
        tf=$(echo "scale=2;((9/5) * $tc) + 32" |bc)
        echo "$tf"
}
function fucTC(){
        local tf=$1
        tc=$(echo "scale=2;(5/9)*($tf-32)"|bc)
        echo "$tc"
}
read -p "select your choice :" choice

case choice in
        1 ) read -p "Enter temp in (C)" tc
           tf="$( fucTF $tc )"
           echo "$tv C = $tf F " ;;
        2 )
        read -p "Enter the temp in (F)" tf
        tc="$(fucTc $tf )"
        echo "$tf = $tc"
        ;;
        * )
        echo "Please inter 1 or 2 only"
        ;;
esac

echo "completed"

____________________________________________________________________________
2.Write a function to check if the two number are palindromes
#! /bin/bash -x


checkPalindrome() {
    local s=$1

    for i in $s
    do
        while [ "$i" -gt 0 ]
        do
            rem=$((i%10))
            rev=$((rev*10+rem))
            i=$((i / 10))
        done
    done

    if [[ $rev -eq $num1 && $rev -eq $num2 ]]
    then
        return 0
    else
        return 1
    fi
}

echo "Enter two number:"
read -r a
read -r b

for num in $a $b
do
    x="$x$sep$num"
    sep=" "
done

y="$x"
num1="$a"
num2="$b"
rem=""
rev=0
for word in $y;
do
    if checkPalindrome "$word"
    then
        echo "$word is palindrome"
    fi
done


____________________________________________________________________________
3.take a number from user and check if the number is sa prime then show that its palindrome is also prime
Write a function check if number is prime 
Write a function to get the palindrome.
Check if the palindrome number is also prime


